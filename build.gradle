



apply plugin: 'idea'
idea {
    project {
        languageLevel = '1.8'
        vcs = 'Git'
    }
}

wrapper {
    gradleVersion = '4.5.1'
    distributionType = org.gradle.api.tasks.wrapper.Wrapper.DistributionType.ALL
}


subprojects {
    apply plugin: 'java'
    apply plugin: 'findbugs'

    apply plugin: 'maven'
    apply plugin: 'signing'

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    javadoc {
        failOnError = false
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }
    signing {
        sign configurations.archives
    }

    group = 'io.github.factoryfx'
    version = '0.9.12'

    if (project.hasProperty('secretKeyRingFileSourceURL')) {
        //workaround  to get key  file to the plugin

        // task to fetch the GPG key to sign the JAR archives
        // we put the key to build/secring.gpg where it will be picked up by the uploadArchives task of the nexus plugin

        task fetchSecretKeyRingFile << {
            def fileTarget ="build/secring.gpg"
            def secretKeyRingFileSourceURL =project.getProperty("secretKeyRingFileSourceURL")
            def secretKeyRingFileSourceURLAuthUsername =project.getProperty("secretKeyRingFileSourceURLAuthUsername")
            def secretKeyRingFileSourceURLAuthPassword =project.getProperty("secretKeyRingFileSourceURLAuthPassword")
            project.setProperty("signing.secretKeyRingFile",fileTarget)
            file(fileTarget).getParentFile().mkdirs()
            ant.get(src: secretKeyRingFileSourceURL, dest: fileTarget, username: secretKeyRingFileSourceURLAuthUsername, password: secretKeyRingFileSourceURLAuthPassword)
        }
        afterEvaluate {
            // always fetch the GPG key before signing archives
            tasks.signArchives.dependsOn fetchSecretKeyRingFile
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name 'factoryfx'
                    packaging 'jar'
                    // optionally artifactId can be defined here
                    description 'factoryfx dependency injection framework'
                    url 'http://factoryfx.github.io/factoryfx'

                    scm {
                        connection 'scm:git@github.com:factoryfx/factoryfx.git'
                        developerConnection 'scm:git@github.com:factoryfx/factoryfx.git'
                        url 'scm:git@github.com:factoryfx/factoryfx.git'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'hbrackmann'
                            name 'Henning Brackmann'
                        }
                    }
                }
            }
        }
    }


    repositories {
        mavenCentral()
    }

    sourceCompatibility = 1.8

    dependencies {
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
        compile group: 'com.google.guava', name: 'guava', version: '23.0'
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
    }

    findbugs {
        sourceSets = [sourceSets.main]
        toolVersion = "3.0.1"
        ignoreFailures = true
        excludeFilter = file("$rootProject.projectDir/findbugs/findbugs-exclude-filter.xml")
    }


    //that is the new publish plugin that doesn't work with maven central
    //https://github.com/gradle/gradle/issues/1165
    apply plugin: 'maven-publish'

    publishing {

        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar {
                    classifier "sources"
                }
            }
        }

        repositories {
            maven {
                // change to point to your repo, e.g. http://my.org/repo
                credentials {
                    username System.getProperty("repouser")
                    password System.getProperty("repopassword")
                }
                url System.getProperty("repourl")
            }
        }
    }




}



project(':applicationServer') {
    dependencies {
        compile project(":factory")
        testCompile project(":testfactories")

    }
}

project(':applicationServerRestServer') {
    dependencies {
        compile project(":applicationServer")
        compile project(":jettyFactory")
        compile project(":applicationServerRestCommon")
    }
}

project(':applicationServerRestClient') {

    dependencies {
        compile 'com.googlecode.java-diff-utils:diffutils:1.3.0'
        compile 'org.fxmisc.richtext:richtextfx:0.6.7'
        compile 'org.controlsfx:controlsfx:8.40.12'
        compile project(":factory")
        compile project(":restutilClient")
        compile project(":applicationServerRestCommon")
    }

}

project(':applicationServerRestCommon') {
    dependencies {
        compile project(":factory")
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.4'
    }
}

project(':applicationServerRestIntegrationTest') {
    uploadArchives.enabled = false
    dependencies {
        compile project(":applicationServerRestServer")
        compile project(":applicationServerRestClient")
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
    }
}

project(':data') {
    dependencies {
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.4'
        compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: '2.9.4'
        compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.9.4'
    }
}

project(':factory') {
    dependencies {
        compile project(":data")
        testCompile project(":testfactories")
    }
}

project(':postgresqlStorage') {
    dependencies {
        compile project(":factory")
        compile group: 'org.postgresql', name: 'postgresql', version: '9.4.1210.jre7'
        testCompile 'ru.yandex.qatools.embed:postgresql-embedded:1.15'
        testCompile project(":testfactories")
    }

}

project(':oracledbStorage') {
    dependencies {
        compile project(":factory")
        //still no oracle driver in mvn central
        testCompile group: 'com.h2database', name: 'h2', version: '1.4.196'
        testCompile project(":testfactories")
    }

}

project(':jettyFactory') {

    dependencies {
        compile project(":factory")
        compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.8.v20171121'
        compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.8.v20171121'
        compile group: 'org.eclipse.jetty', name: 'jetty-webapp', version: '9.4.8.v20171121'

        compile group: 'org.glassfish.jersey.core', name: 'jersey-server', version: '2.26'
        compile group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: '2.9.4'
        compile 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.26'
        compile 'org.glassfish.jersey.inject:jersey-hk2:2.26'

        testCompile project(":restutilClient")
        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
    }

}

project(':restutilClient') {

    dependencies {
        compile project(":factory")
        compile group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: '2.9.4'
        compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.26'
        compile 'org.glassfish.jersey.core:jersey-client:2.26'
        compile 'org.glassfish.jersey.inject:jersey-hk2:2.26'
    }

}


project(':example') {
    uploadArchives.enabled = false
    dependencies {
        compile project(":javafxFactoryEditing")
        compile project(":jettyFactory")
        compile project(":applicationServerRestServer")
        compile project(":factory")
        compile project(":applicationServer")
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
    }

}


project(':javafxDataEditing') {

    dependencies {
        compile project(":data")
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
        compile group: 'org.controlsfx', name: 'controlsfx', version: '8.40.12'
        compile group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.6.10'
        testCompile project(":testfactories")
    }

}

project(':javafxFactoryEditing') {

    dependencies {
        compile project(":factory")
        compile project(":applicationServerRestClient")
        compile project(":applicationServer")
        compile project(":javafxDataEditing")
        testCompile project(":testfactories")
    }

}

project(':javafxDistributionServer') {

    dependencies {
        compile project(":jettyFactory")
        compile project(":factory")
        compile 'org.slf4j:slf4j-api:1.7.12'
    }

}

project(':javafxDistributionClient') {

    dependencies {
        compile project(":restutilClient")
        compile 'org.slf4j:slf4j-api:1.7.12'
    }

}

project(':javascript') {
    dependencies {
        compile project(":data")
        compile group: 'com.google.javascript', name: 'closure-compiler', version: 'v20170218'
    }
}

project(':javascriptDataEditing') {
    dependencies {
        compile project(":javascript")
        compile project(":javafxDataEditing")
        compile group: 'com.google.javascript', name: 'closure-compiler', version: 'v20170218'
    }
}

project(':testfactories') {
    uploadArchives.enabled = false
    dependencies {
        compile project(":factory")
    }
}

project(':servletContainerBridge'){
    dependencies {
        compile project(":factory")
        compile project(":applicationServerRestServer")
        compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
        testCompile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.8.v20171121'
        testCompile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.8.v20171121'
        testCompile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.8.v20171121'
        testCompile group: 'org.eclipse.jetty', name: 'jetty-webapp', version: '9.4.8.v20171121'
        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'

        testCompile project(":applicationServerRestServer")
        testCompile project(":applicationServerRestClient")
    }
}

project(':docu') {
    uploadArchives.enabled = false
    dependencies {
        compile project(":factory")
        compile project(":applicationServer")
        compile project(":jettyFactory")
        compile project(":restutilClient")
        compile project(':postgresqlStorage')
        compile group: 'io.dropwizard.metrics', name: 'metrics-jetty9', version: '3.2.4'
        compile 'ru.yandex.qatools.embed:postgresql-embedded:1.15'
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
    }

}

project(':process') {
    dependencies {
        compile project(":factory")

    }
}